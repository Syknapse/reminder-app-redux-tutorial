{"version":3,"sources":["serviceWorker.js","redux/reducers/index.js","redux/types/index.js","components/App.js","redux/actions/index.js","index.js"],"names":["Boolean","window","location","hostname","match","save","array","localStorage","setItem","JSON","stringify","reminders","state","action","text","dueDate","id","timestamp","parse","getItem","type","Math","random","filter","reminder","sort","a","b","App","props","this","addReminder","deleteReminder","clearReminders","e","value","target","setState","moment","unix","sortByDateOldest","sortByDateNewest","className","map","key","Date","fromNow","title","onClick","delete","placeholder","onChange","htmlFor","handleDate","add","clearAll","name","renderReminders","Component","connect","store","createStore","reducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a494b1c4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n  ADD_REMINDER,\r\n  DELETE_REMINDER,\r\n  CLEAR_REMINDERS,\r\n  SORT_BY_DATE_NEWEST,\r\n  SORT_BY_DATE_OLDEST,\r\n} from '../types/index'\r\n\r\nconst save = array => localStorage.setItem('reminders', JSON.stringify(array))\r\n\r\nconst reminders = (state = [], action) => {\r\n  const { text, dueDate, id, timestamp } = action\r\n  let reminders = null\r\n  state = JSON.parse(localStorage.getItem('reminders')) || []\r\n\r\n  switch (action.type) {\r\n    case ADD_REMINDER:\r\n      reminders = [\r\n        ...state,\r\n        {\r\n          id: Math.random(),\r\n          text,\r\n          dueDate,\r\n          timestamp,\r\n        },\r\n      ]\r\n      save(reminders)\r\n      return reminders\r\n    case DELETE_REMINDER:\r\n      reminders = state.filter(reminder => reminder.id !== id)\r\n      save(reminders)\r\n      return reminders\r\n    case CLEAR_REMINDERS:\r\n      reminders = []\r\n      save(reminders)\r\n      return reminders\r\n    case SORT_BY_DATE_NEWEST:\r\n      reminders = state.sort((a, b) => b.timestamp - a.timestamp)\r\n      save(reminders)\r\n      return reminders\r\n    case SORT_BY_DATE_OLDEST:\r\n      reminders = state.sort((a, b) => a.timestamp - b.timestamp)\r\n      save(reminders)\r\n      return reminders\r\n    default:\r\n      return state\r\n  }\r\n}\r\nexport default reminders\r\n","export const ADD_REMINDER = 'ADD_REMINDER'\r\nexport const DELETE_REMINDER = 'DELETE_REMINDER'\r\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS'\r\nexport const SORT_BY_DATE_NEWEST = 'SORT_BY_DATE_NEWEST'\r\nexport const SORT_BY_DATE_OLDEST = 'SORT_BY_DATE_OLDEST'\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addReminder, deleteReminder, clearReminders, sortByDateNewest, sortByDateOldest } from '../redux/actions/index'\r\nimport moment from 'moment'\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      text: '',\r\n      dueDate: '',\r\n      timestamp: '',\r\n    }\r\n  }\r\n\r\n  add() {\r\n    const { text, dueDate, timestamp } = this.state\r\n    if (text) this.props.addReminder(text, dueDate, timestamp)\r\n  }\r\n\r\n  delete(id) {\r\n    this.props.deleteReminder(id)\r\n  }\r\n\r\n  clearAll() {\r\n    this.props.clearReminders()\r\n  }\r\n\r\n  handleDate(e) {\r\n    const value = e.target.value\r\n    this.setState({ dueDate: value, timestamp: moment(value).unix() })\r\n  }\r\n\r\n  sort(e) {\r\n    e.target.value === 'oldest' ? this.props.sortByDateOldest() : this.props.sortByDateNewest()\r\n  }\r\n\r\n  renderReminders() {\r\n    const { reminders } = this.props\r\n    return (\r\n      <ul className=\"reminders-list\">\r\n        {reminders.map(reminder => (\r\n          <li key={reminder.id}>\r\n            <div className=\"text\">\r\n              <p>{reminder.text}</p>\r\n              <p className=\"due-date\">{reminder.dueDate && moment(new Date(reminder.dueDate)).fromNow()}</p>\r\n            </div>\r\n            <button className=\"remove\" title=\"Remove reminder\" onClick={() => this.delete(reminder.id)}>\r\n              &#x2715;\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"app\">\r\n        <header>Reminder App</header>\r\n        <form>\r\n          <input\r\n            className=\"reminder-input\"\r\n            placeholder=\"Type a reminder ...\"\r\n            onChange={e => this.setState({ text: e.target.value })}\r\n          />\r\n          <div className=\"date-group\">\r\n            <label htmlFor=\"date\">Add date</label>\r\n            <input id=\"date\" title=\"Add due date\" type=\"datetime-local\" onChange={e => this.handleDate(e)} />\r\n          </div>\r\n          <div className=\"button-group\">\r\n            <button type=\"button\" onClick={() => this.add()}>\r\n              Save reminder\r\n            </button>\r\n            <button className=\"delete\" type=\"button\" onClick={() => this.clearAll()}>\r\n              Clear all reminders\r\n            </button>\r\n          </div>\r\n          <div className=\"sort-group\" onChange={e => this.sort(e)}>\r\n            <label htmlFor=\"newest\">Newest</label>\r\n            <input id=\"newest\" type=\"radio\" name=\"sort\" value=\"newest\" />\r\n            <label htmlFor=\"oldest\">Oldest</label>\r\n            <input id=\"oldest\" type=\"radio\" name=\"sort\" value=\"oldest\" />\r\n          </div>\r\n        </form>\r\n        {this.renderReminders()}\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    reminders: state,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  addReminder,\r\n  deleteReminder,\r\n  clearReminders,\r\n  sortByDateNewest,\r\n  sortByDateOldest,\r\n})(App)\r\n\r\n/* const App = () => {\r\n  const [text, setText] = useState('')\r\n\r\n  const add = e => {\r\n    // e.preventDefault()\r\n    console.log('button clicked -->text', text)\r\n    console.log(this)\r\n    addReminder(text)\r\n  }\r\n\r\n  return (\r\n    <main className=\"App\">\r\n      <header>Reminder App</header>\r\n      <form>\r\n        <input placeholder=\"Reminder\" onChange={e => setText(e.target.value)} />\r\n        <button type=\"button\" onClick={e => add(e)}>\r\n          Add reminder\r\n        </button>\r\n      </form>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default connect(null, { addReminder })(App) */\r\n","import {\r\n  ADD_REMINDER,\r\n  DELETE_REMINDER,\r\n  CLEAR_REMINDERS,\r\n  SORT_BY_DATE_NEWEST,\r\n  SORT_BY_DATE_OLDEST,\r\n} from '../types/index'\r\n\r\nexport const addReminder = (text, dueDate, timestamp) => {\r\n  const action = {\r\n    type: ADD_REMINDER,\r\n    text,\r\n    dueDate,\r\n    timestamp,\r\n  }\r\n  return action\r\n}\r\n\r\nexport const deleteReminder = id => {\r\n  const action = {\r\n    type: DELETE_REMINDER,\r\n    id,\r\n  }\r\n  return action\r\n}\r\n\r\nexport const clearReminders = () => {\r\n  const action = {\r\n    type: CLEAR_REMINDERS,\r\n  }\r\n  return action\r\n}\r\n\r\nexport const sortByDateNewest = () => {\r\n  const action = {\r\n    type: SORT_BY_DATE_NEWEST,\r\n  }\r\n  return action\r\n}\r\n\r\nexport const sortByDateOldest = () => {\r\n  const action = {\r\n    type: SORT_BY_DATE_OLDEST,\r\n  }\r\n  return action\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport reducer from './redux/reducers/index'\r\nimport './index.css'\r\nimport App from './components/App'\r\n\r\nconst store = createStore(reducer)\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}