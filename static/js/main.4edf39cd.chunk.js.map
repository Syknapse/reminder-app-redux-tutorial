{"version":3,"sources":["serviceWorker.js","utils/save.js","redux/reducers/reminders.js","redux/types/index.js","redux/reducers/currentSortFilter.js","redux/reducers/currentVisibilityFilter.js","redux/reducers/index.js","components/FilterSelector/index.jsx","data/icons/checkMark.js","components/ReminderItem/index.jsx","components/RemindersList/index.jsx","components/App.js","redux/actions/index.js","index.js"],"names":["Boolean","window","location","hostname","match","save","payload","Object","keys","item","values","data","localStorage","setItem","JSON","stringify","reminders","state","action","text","dueDate","id","timestamp","isComplete","parse","getItem","type","Math","random","filter","reminder","selectedReminder","currentSortFilter","filters","currentVisibilityFilter","reducers","combineReducers","FilterSelector","group","label","selected","htmlFor","name","value","defaultChecked","checkMark","xmlns","width","height","version","d","ReminderItem","onToggle","onDelete","key","title","className","clsx","onClick","moment","Date","fromNow","RemindersList","isPast","date","isBefore","pastReminders","futureReminders","map","length","App","props","this","addReminder","setState","toggleReminder","deleteReminder","clearReminders","e","target","unix","keyCode","preventDefault","add","setSortFilter","setVisibilityFilter","visibleReminders","filterVisibleReminders","sortReminders","sort","a","b","sortFilterTypes","visibilityFilterTypes","onKeyDown","handleEnter","placeholder","onChange","handleDate","disabled","clearAll","applyVisibilityFilter","applySortFilter","filterReminders","toggle","delete","Component","connect","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4edf39cd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const save = payload => {\r\n  const [item] = Object.keys(payload)\r\n  const [data] = Object.values(payload)\r\n\r\n  return localStorage.setItem(item, JSON.stringify(data))\r\n}\r\n\r\nexport default save\r\n","import { ADD_REMINDER, TOGGLE_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS } from '../types/index'\r\nimport save from '../../utils/save'\r\n\r\nconst reminders = (state = [], action) => {\r\n  const { text, dueDate, id, timestamp, isComplete } = action\r\n  let reminders = null\r\n  state = JSON.parse(localStorage.getItem('reminders')) || []\r\n\r\n  switch (action.type) {\r\n    case ADD_REMINDER:\r\n      reminders = [\r\n        ...state,\r\n        {\r\n          id: Math.random(),\r\n          text,\r\n          dueDate,\r\n          timestamp,\r\n          isComplete,\r\n        },\r\n      ]\r\n      save({ reminders })\r\n      return reminders\r\n    case TOGGLE_REMINDER:\r\n      const [selectedReminder] = state.filter(reminder => reminder.id === id)\r\n      selectedReminder.isComplete = !selectedReminder.isComplete\r\n      reminders = [...state]\r\n      save({ reminders })\r\n      return reminders\r\n    case DELETE_REMINDER:\r\n      reminders = state.filter(reminder => reminder.id !== id)\r\n      save({ reminders })\r\n      return reminders\r\n    case CLEAR_REMINDERS:\r\n      reminders = []\r\n      save({ reminders })\r\n      return reminders\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reminders\r\n","export const ADD_REMINDER = 'ADD_REMINDER'\r\nexport const TOGGLE_REMINDER = 'TOGGLE_REMINDER'\r\nexport const DELETE_REMINDER = 'DELETE_REMINDER'\r\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS'\r\nexport const SET_SORT_FILTER = 'SET_SORT_FILTER'\r\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'\r\n","import { SET_SORT_FILTER } from '../types/index'\r\nimport save from '../../utils/save'\r\n\r\nconst currentSortFilter = (state, action) => {\r\n  state = JSON.parse(localStorage.getItem('filters')) || {}\r\n  state.currentSortFilter = state.currentSortFilter || 'NEWEST'\r\n\r\n  switch (action.type) {\r\n    case SET_SORT_FILTER:\r\n      const filters = {\r\n        ...state,\r\n        currentSortFilter: action.filter,\r\n      }\r\n      save({ filters })\r\n      return action.filter\r\n    default:\r\n      return state.currentSortFilter\r\n  }\r\n}\r\n\r\nexport default currentSortFilter\r\n","import { SET_VISIBILITY_FILTER } from '../types/index'\r\nimport save from '../../utils/save'\r\n\r\nconst currentVisibilityFilter = (state, action) => {\r\n  state = JSON.parse(localStorage.getItem('filters')) || {}\r\n  state.currentVisibilityFilter = state.currentVisibilityFilter || 'ALL'\r\n\r\n  switch (action.type) {\r\n    case SET_VISIBILITY_FILTER:\r\n      const filters = {\r\n        ...state,\r\n        currentVisibilityFilter: action.filter,\r\n      }\r\n      save({ filters })\r\n      return action.filter\r\n    default:\r\n      return state.currentVisibilityFilter\r\n  }\r\n}\r\n\r\nexport default currentVisibilityFilter\r\n","import { combineReducers } from 'redux'\r\nimport reminders from './reminders'\r\nimport currentSortFilter from './currentSortFilter'\r\nimport currentVisibilityFilter from './currentVisibilityFilter'\r\n\r\nconst reducers = combineReducers({\r\n  reminders,\r\n  currentSortFilter,\r\n  currentVisibilityFilter,\r\n})\r\n\r\nexport default reducers\r\n","import React from 'react'\r\n\r\nconst FilterSelector = ({ group, label, type, selected }) => (\r\n  <>\r\n    <label htmlFor={type}>{label}</label>\r\n    <input id={type} type=\"radio\" name={group} value={type} defaultChecked={selected === type} />\r\n  </>\r\n)\r\n\r\nexport default FilterSelector\r\n","import React from 'react'\r\n\r\nconst checkMark = (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"19.213\" height=\"18.295\" version=\"1.0\">\r\n    <defs />\r\n    <path d=\"M4.775 18.295c-.275-.004-1.462-1.778-2.638-3.944L0 10.413l.554-.554c.305-.305 1.124-.554 1.82-.554H3.64l.636 2.005.637 2.005 5.064-5.541c2.786-3.048 6.003-6.044 7.15-6.658L19.213 0l-4.21 4.782c-2.314 2.63-5.45 6.748-6.969 9.15-1.517 2.404-2.984 4.367-3.26 4.363z\" />\r\n  </svg>\r\n)\r\n\r\nexport default checkMark\r\n","import React from 'react'\r\nimport moment from 'moment'\r\nimport clsx from 'clsx'\r\nimport checkMark from '../../data/icons/checkMark'\r\nimport './reminderItem.css'\r\n\r\nconst ReminderItem = ({ id, text, dueDate, isComplete, onToggle, onDelete }) => (\r\n  <li key={id} title={isComplete ? `Completed ${text}!` : 'Still pending'}>\r\n    <button className={clsx('status', isComplete && 'completed')} title=\"Toggle status\" onClick={onToggle}>\r\n      {checkMark}\r\n    </button>\r\n    <div className=\"text\">\r\n      <p>{text}</p>\r\n      <p className=\"due-date\">{dueDate && moment(new Date(dueDate)).fromNow()}</p>\r\n    </div>\r\n    <button className=\"remove\" title=\"Remove reminder\" onClick={onDelete}>\r\n      &#x2715;\r\n    </button>\r\n  </li>\r\n)\r\n\r\nexport default ReminderItem\r\n","import React from 'react'\r\nimport moment from 'moment'\r\nimport { ReminderItem } from '../index'\r\nimport './remindersList.css'\r\n\r\nconst RemindersList = ({ reminders, onToggle, onDelete }) => {\r\n  const isPast = date => moment(new Date(date)).isBefore()\r\n  const pastReminders = reminders.filter(reminder => isPast(reminder.dueDate))\r\n  const futureReminders = reminders.filter(reminder => !isPast(reminder.dueDate))\r\n\r\n  return (\r\n    <ul className=\"reminders-list\">\r\n      {futureReminders.map(reminder => (\r\n        <ReminderItem\r\n          key={reminder.id}\r\n          id={reminder.id}\r\n          text={reminder.text}\r\n          dueDate={reminder.dueDate}\r\n          isComplete={reminder.isComplete}\r\n          onToggle={() => onToggle(reminder.id)}\r\n          onDelete={() => onDelete(reminder.id)}\r\n        />\r\n      ))}\r\n      {pastReminders.length > 0 && <hr />}\r\n      {pastReminders.map(reminder => (\r\n        <ReminderItem\r\n          key={reminder.id}\r\n          id={reminder.id}\r\n          text={reminder.text}\r\n          dueDate={reminder.dueDate}\r\n          isComplete={reminder.isComplete}\r\n          onToggle={() => onToggle(reminder.id)}\r\n          onDelete={() => onDelete(reminder.id)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default RemindersList\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  addReminder,\r\n  toggleReminder,\r\n  deleteReminder,\r\n  clearReminders,\r\n  setSortFilter,\r\n  setVisibilityFilter,\r\n} from '../redux/actions/index'\r\nimport moment from 'moment'\r\nimport { FilterSelector, RemindersList } from './index'\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      text: '',\r\n      dueDate: '',\r\n      timestamp: '',\r\n      isComplete: false,\r\n    }\r\n  }\r\n\r\n  add() {\r\n    const { text, dueDate, timestamp, isComplete } = this.state\r\n    if (text) this.props.addReminder(text, dueDate, timestamp, isComplete)\r\n    this.setState({ text: '' })\r\n  }\r\n\r\n  toggle(id) {\r\n    this.props.toggleReminder(id)\r\n  }\r\n\r\n  delete(id) {\r\n    this.props.deleteReminder(id)\r\n  }\r\n\r\n  clearAll() {\r\n    this.props.clearReminders()\r\n  }\r\n\r\n  handleDate(e) {\r\n    const value = e.target.value\r\n    this.setState({ dueDate: value, timestamp: moment(value).unix() })\r\n  }\r\n\r\n  handleEnter(e) {\r\n    const key = e.keyCode\r\n    if (key === 13) {\r\n      e.preventDefault()\r\n      this.add()\r\n    }\r\n  }\r\n\r\n  applySortFilter(e) {\r\n    this.props.setSortFilter(e.target.value)\r\n  }\r\n\r\n  applyVisibilityFilter(e) {\r\n    this.props.setVisibilityFilter(e.target.value)\r\n  }\r\n\r\n  sortFilterTypes() {\r\n    return [\r\n      {\r\n        label: 'Newest',\r\n        type: 'NEWEST',\r\n      },\r\n      {\r\n        label: 'Oldest',\r\n        type: 'OLDEST',\r\n      },\r\n    ]\r\n  }\r\n\r\n  visibilityFilterTypes() {\r\n    return [\r\n      {\r\n        label: 'All',\r\n        type: 'ALL',\r\n      },\r\n      {\r\n        label: 'Pending',\r\n        type: 'PENDING',\r\n      },\r\n      {\r\n        label: 'Done',\r\n        type: 'DONE',\r\n      },\r\n    ]\r\n  }\r\n\r\n  filterReminders({ reminders, currentVisibilityFilter, currentSortFilter }) {\r\n    const visibleReminders = this.filterVisibleReminders(reminders, currentVisibilityFilter)\r\n    const sortedReminders = this.sortReminders(visibleReminders, currentSortFilter)\r\n    return sortedReminders\r\n  }\r\n\r\n  filterVisibleReminders(reminders, filter) {\r\n    if (filter === 'DONE') {\r\n      return reminders.filter(reminder => reminder.isComplete)\r\n    } else if (filter === 'PENDING') {\r\n      return reminders.filter(reminder => !reminder.isComplete)\r\n    } else {\r\n      return reminders\r\n    }\r\n  }\r\n\r\n  sortReminders(reminders, filter) {\r\n    if (filter === 'NEWEST') {\r\n      return reminders.sort((a, b) => b.timestamp - a.timestamp)\r\n    } else if (filter === 'OLDEST') {\r\n      return reminders.sort((a, b) => a.timestamp - b.timestamp)\r\n    } else {\r\n      return reminders\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { currentSortFilter, currentVisibilityFilter } = this.props\r\n    const { text } = this.state\r\n    const sortFilterTypes = this.sortFilterTypes()\r\n    const visibilityFilterTypes = this.visibilityFilterTypes()\r\n\r\n    return (\r\n      <main className=\"app\">\r\n        <header>Reminder App</header>\r\n        <form onKeyDown={e => this.handleEnter(e)}>\r\n          <input\r\n            className=\"reminder-input\"\r\n            placeholder=\"Type a reminder ...\"\r\n            onChange={e => this.setState({ text: e.target.value })}\r\n            value={text}\r\n          />\r\n          <div className=\"date-group\">\r\n            <label htmlFor=\"date\">Add date</label>\r\n            <input id=\"date\" title=\"Add due date\" type=\"date\" onChange={e => this.handleDate(e)} />\r\n          </div>\r\n          <div className=\"button-group\">\r\n            <button type=\"button\" onClick={() => this.add()} disabled={text.length === 0}>\r\n              Save reminder\r\n            </button>\r\n            <button className=\"delete\" type=\"button\" onClick={() => this.clearAll()}>\r\n              Clear all reminders\r\n            </button>\r\n          </div>\r\n          <div className=\"filters\">\r\n            <div className=\"filters-group\" onChange={e => this.applyVisibilityFilter(e)}>\r\n              <span>Visibility: </span>\r\n              {visibilityFilterTypes.map(filter => (\r\n                <FilterSelector\r\n                  key={filter.type}\r\n                  group=\"visibility\"\r\n                  label={filter.label}\r\n                  type={filter.type}\r\n                  selected={currentVisibilityFilter}\r\n                />\r\n              ))}\r\n            </div>\r\n            <div className=\"filters-group\" onChange={e => this.applySortFilter(e)}>\r\n              <span>Sort: </span>\r\n              {sortFilterTypes.map(filter => (\r\n                <FilterSelector\r\n                  key={filter.type}\r\n                  group=\"sort\"\r\n                  label={filter.label}\r\n                  type={filter.type}\r\n                  selected={currentSortFilter}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </form>\r\n        <RemindersList\r\n          reminders={this.filterReminders(this.props)}\r\n          onToggle={id => this.toggle(id)}\r\n          onDelete={id => this.delete(id)}\r\n        />\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    reminders: state.reminders,\r\n    currentSortFilter: state.currentSortFilter,\r\n    currentVisibilityFilter: state.currentVisibilityFilter,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  addReminder,\r\n  toggleReminder,\r\n  deleteReminder,\r\n  clearReminders,\r\n  setSortFilter,\r\n  setVisibilityFilter,\r\n})(App)\r\n","import {\r\n  ADD_REMINDER,\r\n  TOGGLE_REMINDER,\r\n  DELETE_REMINDER,\r\n  CLEAR_REMINDERS,\r\n  SET_SORT_FILTER,\r\n  SET_VISIBILITY_FILTER,\r\n} from '../types/index'\r\n\r\nexport const addReminder = (text, dueDate, timestamp, isComplete) => {\r\n  const action = {\r\n    type: ADD_REMINDER,\r\n    text,\r\n    dueDate,\r\n    timestamp,\r\n    isComplete,\r\n  }\r\n  return action\r\n}\r\n\r\nexport const toggleReminder = id => {\r\n  const action = {\r\n    type: TOGGLE_REMINDER,\r\n    id,\r\n  }\r\n  return action\r\n}\r\n\r\nexport const deleteReminder = id => {\r\n  const action = {\r\n    type: DELETE_REMINDER,\r\n    id,\r\n  }\r\n  return action\r\n}\r\n\r\nexport const clearReminders = () => {\r\n  const action = {\r\n    type: CLEAR_REMINDERS,\r\n  }\r\n  return action\r\n}\r\n\r\nexport const setSortFilter = filter => {\r\n  const action = {\r\n    type: SET_SORT_FILTER,\r\n    filter,\r\n  }\r\n  return action\r\n}\r\n\r\nexport const setVisibilityFilter = filter => {\r\n  const action = {\r\n    type: SET_VISIBILITY_FILTER,\r\n    filter,\r\n  }\r\n  return action\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport reducers from './redux/reducers/index'\r\nimport './index.css'\r\nimport App from './components/App'\r\n\r\nconst store = createStore(reducers)\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}